ROUTINE PXW.DEV.BNF.GEN.JS.1 [Type=INT,Generated]
 ;PXW.DEV.BNF.GEN.JS.1
 ;Generated for class PXW.DEV.BNF.GEN.JS.  Do NOT edit. 08/14/2025 07:39:53PM
 ;;56764F46;PXW.DEV.BNF.GEN.JS
 ;
AliasName(ParentElement,subElement) methodimpl {
	; rules summary C&[K&C]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:AliasName")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"AliasName" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("AliasName") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..IdentifierName(.subElement,.addedElement)  {
		if ..AliasName9OptGrp(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("AliasName")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:AliasName")
	quit ok }
AliasName9OptGrp(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("AS"),.value)) { quit 1 /* not found is OK */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:AliasName9OptGrp")
	set subElement=..newElement("AliasName9OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"AS")  {
		if ..IdentifierName(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("AliasName9OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:AliasName9OptGrp")
	quit ok }
And(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("&&",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:And")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"And" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("And") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"&&")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("And")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:And")
	quit ok }
AnonymousFunction(ParentElement,subElement) methodimpl {
	; rules summary [K]&K&[P]&[C]&P&[C]&P&C|[K]&C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:AnonymousFunction")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"AnonymousFunction" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("AnonymousFunction") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..AnonymousFunction168Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..AnonymousFunction169Sub(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("AnonymousFunction")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:AnonymousFunction")
	quit ok }
AnonymousFunction168Sub(ParentElement,subElement) methodimpl {
	; rules summary [K]&K&[P]&[C]&P&[C]&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:AnonymousFunction168Sub")
	set subElement=..newElement("AnonymousFunction168Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..addKeyword(.subElement,"ASYNC") :1,1:1) {
		if ..addKeyword(.subElement,"FUNCTION")  {
			if $S(..addPunctuation(.subElement,"*") :1,1:1) {
				if $S(..Identifier(.subElement,.addedElement) :1,1:1) {
					if ..addPunctuation(.subElement,"(")  {
						if $S(..FormalParameterList(.subElement,.addedElement) :1,1:1) {
							if ..addPunctuation(.subElement,")")  {
								if ..FunctionBody(.subElement,.addedElement)  {
									set done=1 ; end compileRules
								}
							}
						}
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("AnonymousFunction168Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:AnonymousFunction168Sub")
	quit ok }
AnonymousFunction169Sub(ParentElement,subElement) methodimpl {
	; rules summary [K]&C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:AnonymousFunction169Sub")
	set subElement=..newElement("AnonymousFunction169Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..addKeyword(.subElement,"ASYNC") :1,1:1) {
		if ..ArrowFunctionParameters(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"=>")  {
				if ..ArrowFunctionBody(.subElement,.addedElement)  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("AnonymousFunction169Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:AnonymousFunction169Sub")
	quit ok }
Argument(ParentElement,subElement) methodimpl {
	; rules summary [C]&C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Argument")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Argument" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Argument") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..Ellipsis(.subElement,.addedElement) :1,1:1) {
		if ..Argument71Sub(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Argument")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Argument")
	quit ok }
Argument71Sub(ParentElement,subElement) methodimpl {
	; rules summary C|C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..SingleExpression(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Identifier(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Arguments(ParentElement,subElement) methodimpl {
	; rules summary P&[C&(?4punctuation:4?)*]&P
	; first rule summary P
	if '(..isStringSingle("(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Arguments")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Arguments" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Arguments") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"(")  {
		if ..Arguments68OptGrp(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,")")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Arguments")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Arguments")
	quit ok }
Arguments68OptGrp(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Arguments68OptGrp")
	set subElement=..newElement("Arguments68OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Argument(.subElement,.addedElement)  {
		if ..Arguments69RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Arguments68OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Arguments68OptGrp")
	quit ok }
Arguments69RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Arguments70Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Arguments70Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle(",",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Arguments70Sub")
	set subElement=..newElement("Arguments70Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,",")  {
		if ..Argument(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Arguments70Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Arguments70Sub")
	quit ok }
ArrayElement(ParentElement,subElement) methodimpl {
	; rules summary [C]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ArrayElement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ArrayElement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ArrayElement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..Ellipsis(.subElement,.addedElement) :1,1:1) {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ArrayElement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ArrayElement")
	quit ok }
ArrayLiteral(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("[",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ArrayLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ArrayLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ArrayLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"[")  {
		if ..ElementList(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"]")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ArrayLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ArrayLiteral")
	quit ok }
Arrow(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("=>",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Arrow")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Arrow" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Arrow") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"=>")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Arrow")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Arrow")
	quit ok }
ArrowFunctionBody(ParentElement,subElement) methodimpl {
	; rules summary C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ArrowFunctionBody")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ArrowFunctionBody" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ArrowFunctionBody") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..FunctionBody(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ArrowFunctionBody")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ArrowFunctionBody")
	quit ok }
ArrowFunctionParameters(ParentElement,subElement) methodimpl {
	; rules summary C|P&[C]&P
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ArrowFunctionParameters")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ArrowFunctionParameters" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ArrowFunctionParameters") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Identifier(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ArrowFunctionParameters170Sub(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ArrowFunctionParameters")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ArrowFunctionParameters")
	quit ok }
ArrowFunctionParameters170Sub(ParentElement,subElement) methodimpl {
	; rules summary P&[C]&P
	; first rule summary P
	if '(..isStringSingle("(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ArrowFunctionParameters170Sub")
	set subElement=..newElement("ArrowFunctionParameters170Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"(")  {
		if $S(..FormalParameterList(.subElement,.addedElement) :1,1:1) {
			if ..addPunctuation(.subElement,")")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ArrowFunctionParameters170Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ArrowFunctionParameters170Sub")
	quit ok }
Assign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Assign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Assign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Assign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Assign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Assign")
	quit ok }
Assignable(ParentElement,subElement) methodimpl {
	; rules summary C|C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Assignable")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Assignable" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Assignable") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Identifier(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ArrayLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ObjectLiteral(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Assignable")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Assignable")
	quit ok }
AssignmentOperator(ParentElement,subElement) methodimpl {
	; rules summary P|P|P|P|P|P|P|P|P|P|P|P|P
	if '(..isStringInList($lb("*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|=","**=","??="),4,.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:AssignmentOperator")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"AssignmentOperator" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("AssignmentOperator") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"*=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"/=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"%=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"+=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"-=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"<<=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,">>=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,">>>=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"&=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"^=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"|=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"**=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"??=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("AssignmentOperator")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:AssignmentOperator")
	quit ok }
BigBinaryIntegerLiteral(ParentElement,subElement) methodimpl {
	; rules summary P|P&(?4punctuation:4?)*&K
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:BigBinaryIntegerLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"BigBinaryIntegerLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("BigBinaryIntegerLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..BigBinaryIntegerLiteral192Sub(.subElement,.addedElement)  {
		if ..BigBinaryIntegerLiteral193RepZero(.subElement,.addedElement)  {
			if ..addKeyword(.subElement,"N")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("BigBinaryIntegerLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:BigBinaryIntegerLiteral")
	quit ok }
BigBinaryIntegerLiteral192Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P
	if '(..isStringInList($lb("0B","0B"),2,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"0b")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"0B")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
BigBinaryIntegerLiteral193RepZe(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..BigBinaryIntegerLiteral194Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
BigBinaryIntegerLiteral194Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P
	if '(..isStringInList($lb("0","1"),1,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"0")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"1")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
BigDecimalIntegerLiteral(ParentElement,subElement) methodimpl {
	; rules summary C&K
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:BigDecimalIntegerLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"BigDecimalIntegerLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("BigDecimalIntegerLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..DecimalIntegerLiteral(.subElement,.addedElement)  {
		if ..addKeyword(.subElement,"N")  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("BigDecimalIntegerLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:BigDecimalIntegerLiteral")
	quit ok }
BigHexIntegerLiteral(ParentElement,subElement) methodimpl {
	; rules summary P|P&(?4punctuation:4?)*&K
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:BigHexIntegerLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"BigHexIntegerLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("BigHexIntegerLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..BigHexIntegerLiteral186Sub(.subElement,.addedElement)  {
		if ..BigHexIntegerLiteral187RepZero(.subElement,.addedElement)  {
			if ..addKeyword(.subElement,"N")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("BigHexIntegerLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:BigHexIntegerLiteral")
	quit ok }
BigHexIntegerLiteral186Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P
	if '(..isStringInList($lb("0X","0X"),2,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"0x")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"0X")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
BigHexIntegerLiteral187RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..BigHexIntegerLiteral188Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
BigHexIntegerLiteral188Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P|P|P|P|P|P|P|P|P|K|K|K|K|K|K
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:BigHexIntegerLiteral188Sub")
	set subElement=..newElement("BigHexIntegerLiteral188Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"0")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"1")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"2")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"3")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"4")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"5")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"6")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"7")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"8")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"9")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"A")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"B")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"C")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"D")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"E")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"F")  {
		set done=1 ; end compileRules
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("BigHexIntegerLiteral188Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:BigHexIntegerLiteral188Sub")
	quit ok }
BigOctalIntegerLiteral(ParentElement,subElement) methodimpl {
	; rules summary P|P&(?4punctuation:4?)*&K
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:BigOctalIntegerLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"BigOctalIntegerLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("BigOctalIntegerLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..BigOctalIntegerLiteral189Sub(.subElement,.addedElement)  {
		if ..BigOctalIntegerLiteral190RepZero(.subElement,.addedElement)  {
			if ..addKeyword(.subElement,"N")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("BigOctalIntegerLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:BigOctalIntegerLiteral")
	quit ok }
BigOctalIntegerLiteral189Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P
	if '(..isStringInList($lb("0O","0O"),2,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"0o")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"0O")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
BigOctalIntegerLiteral190RepZer(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..BigOctalIntegerLiteral191Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
BigOctalIntegerLiteral191Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P|P|P|P|P|P|P
	if '(..isStringInList($lb("0","1","2","3","4","5","6","7"),1,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"0")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"1")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"2")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"3")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"4")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"5")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"6")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"7")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
BigintLiteral(ParentElement,subElement) methodimpl {
	; rules summary C|C|C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:BigintLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"BigintLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("BigintLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..BigDecimalIntegerLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..BigHexIntegerLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..BigOctalIntegerLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..BigBinaryIntegerLiteral(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("BigintLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:BigintLiteral")
	quit ok }
BinaryIntegerLiteral(ParentElement,subElement) methodimpl {
	; rules summary P|P&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:BinaryIntegerLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"BinaryIntegerLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("BinaryIntegerLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..BinaryIntegerLiteral183Sub(.subElement,.addedElement)  {
		if ..BinaryIntegerLiteral184RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("BinaryIntegerLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:BinaryIntegerLiteral")
	quit ok }
BinaryIntegerLiteral183Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P
	if '(..isStringInList($lb("0B","0B"),2,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"0b")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"0B")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
BinaryIntegerLiteral184RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..BinaryIntegerLiteral185Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
BinaryIntegerLiteral185Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P
	if '(..isStringInList($lb("0","1"),1,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"0")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"1")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Bitand(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("&",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Bitand")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Bitand" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Bitand") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"&")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Bitand")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Bitand")
	quit ok }
Bitandassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("&=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Bitandassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Bitandassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Bitandassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"&=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Bitandassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Bitandassign")
	quit ok }
Bitnot(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("~",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Bitnot")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Bitnot" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Bitnot") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"~")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Bitnot")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Bitnot")
	quit ok }
Bitor(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("|",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Bitor")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Bitor" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Bitor") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"|")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Bitor")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Bitor")
	quit ok }
Bitorassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("|=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Bitorassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Bitorassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Bitorassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"|=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Bitorassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Bitorassign")
	quit ok }
Bitxor(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("^",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Bitxor")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Bitxor" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Bitxor") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"^")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Bitxor")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Bitxor")
	quit ok }
Bitxorassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("^=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Bitxorassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Bitxorassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Bitxorassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"^=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Bitxorassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Bitxorassign")
	quit ok }
Block(ParentElement,subElement) methodimpl {
	; rules summary P&[C]&P
	; first rule summary P
	if '(..isStringSingle("{",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Block")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Block" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Block") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"{")  {
		if $S(..StatementList(.subElement,.addedElement) :1,1:1) {
			if ..addPunctuation(.subElement,"}")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Block")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Block")
	quit ok }
BooleanLiteral(ParentElement,subElement) methodimpl {
	; rules summary K|K
	if '(..isKeywordInList($lb("TRUE","FALSE"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:BooleanLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"BooleanLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("BooleanLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"TRUE")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"FALSE")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("BooleanLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:BooleanLiteral")
	quit ok }
BreakStatement(ParentElement,subElement) methodimpl {
	; rules summary K&[C&C]&C
	; first rule summary K
	if '(..isKeywordInList($lb("BREAK"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:BreakStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"BreakStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("BreakStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"BREAK")  {
		if ..BreakStatement32OptGrp(.subElement,.addedElement)  {
			if ..Eos(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("BreakStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:BreakStatement")
	quit ok }
BreakStatement32OptGrp(ParentElement,subElement) methodimpl {
	; rules summary C&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:BreakStatement32OptGrp")
	set subElement=..newElement("BreakStatement32OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..IsNotLineTerminator(.subElement,.addedElement)  {
		if ..Identifier(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("BreakStatement32OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:BreakStatement32OptGrp")
	quit ok }
CaseBlock(ParentElement,subElement) methodimpl {
	; rules summary P&[C]&[C&[C]]&P
	; first rule summary P
	if '(..isStringSingle("{",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CaseBlock")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"CaseBlock" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("CaseBlock") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"{")  {
		if $S(..CaseClauses(.subElement,.addedElement) :1,1:1) {
			if ..CaseBlock33OptGrp(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,"}")  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CaseBlock")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CaseBlock")
	quit ok }
CaseBlock33OptGrp(ParentElement,subElement) methodimpl {
	; rules summary C&[C]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CaseBlock33OptGrp")
	set subElement=..newElement("CaseBlock33OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..DefaultClause(.subElement,.addedElement)  {
		if $S(..CaseClauses(.subElement,.addedElement) :1,1:1) {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CaseBlock33OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CaseBlock33OptGrp")
	quit ok }
CaseClause(ParentElement,subElement) methodimpl {
	; rules summary K&C&P&(?4punctuation:4?)*
	; first rule summary K
	if '(..isKeywordInList($lb("CASE"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CaseClause")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"CaseClause" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("CaseClause") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"CASE")  {
		if ..ExpressionSequence(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,":")  {
				if ..CaseClause35RepZero(.subElement,.addedElement)  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CaseClause")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CaseClause")
	quit ok }
CaseClause35RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..CaseClause36Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
CaseClause36Sub(ParentElement,subElement) methodimpl {
	; rules summary ?4NotRule4?&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CaseClause36Sub")
	set subElement=..newElement("CaseClause36Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if '..addKeyword(.subElement,"CASE")  {
		if ..Statement(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CaseClause36Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CaseClause36Sub")
	quit ok }
CaseClauses(ParentElement,subElement) methodimpl {
	; rules summary (?4Call:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CaseClauses")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"CaseClauses" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("CaseClauses") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..CaseClauses34RepZero(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CaseClauses")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CaseClauses")
	quit ok }
CaseClauses34RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4Call:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..CaseClause(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
CatchProduction(ParentElement,subElement) methodimpl {
	; rules summary K&[P&?4OptionalSingle4?&P]&C
	; first rule summary K
	if '(..isKeywordInList($lb("CATCH"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CatchProduction")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"CatchProduction" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("CatchProduction") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"CATCH")  {
		if ..CatchProduction41OptGrp(.subElement,.addedElement)  {
			if ..Block(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CatchProduction")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CatchProduction")
	quit ok }
CatchProduction41OptGrp(ParentElement,subElement) methodimpl {
	; rules summary P&?4OptionalSingle4?&P
	; first rule summary P
	if '(..isStringSingle("(",.value)) { quit 1 /* not found is OK */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CatchProduction41OptGrp")
	set subElement=..newElement("CatchProduction41OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"(")  {
		if $s(..Assignable(.subElement,.addedElement) :1,1:1)  {
			if ..addPunctuation(.subElement,")")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CatchProduction41OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CatchProduction41OptGrp")
	quit ok }
ClassDeclaration(ParentElement,subElement) methodimpl {
	; rules summary K&C&C
	; first rule summary K
	if '(..isKeywordInList($lb("CLASS"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ClassDeclaration")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ClassDeclaration" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ClassDeclaration") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"CLASS")  {
		if ..Identifier(.subElement,.addedElement)  {
			if ..ClassTail(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ClassDeclaration")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ClassDeclaration")
	quit ok }
ClassElement(ParentElement,subElement) methodimpl {
	; rules summary [[K]&C]&C|[[K]&C]&C|[[K]&C]&C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ClassElement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ClassElement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ClassElement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ClassElement44Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ClassElement46Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ClassElement48Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..EmptyStatement(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ClassElement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ClassElement")
	quit ok }
ClassElement44Sub(ParentElement,subElement) methodimpl {
	; rules summary [[K]&C]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ClassElement44Sub")
	set subElement=..newElement("ClassElement44Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ClassElement45OptGrp(.subElement,.addedElement)  {
		if ..MethodDefinition(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ClassElement44Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ClassElement44Sub")
	quit ok }
ClassElement45OptGrp(ParentElement,subElement) methodimpl {
	; rules summary [K]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ClassElement45OptGrp")
	set subElement=..newElement("ClassElement45OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..addKeyword(.subElement,"STATIC") :1,1:1) {
		if ..Identifier(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ClassElement45OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ClassElement45OptGrp")
	quit ok }
ClassElement46Sub(ParentElement,subElement) methodimpl {
	; rules summary [[K]&C]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ClassElement46Sub")
	set subElement=..newElement("ClassElement46Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ClassElement47OptGrp(.subElement,.addedElement)  {
		if ..FieldDefinition(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ClassElement46Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ClassElement46Sub")
	quit ok }
ClassElement47OptGrp(ParentElement,subElement) methodimpl {
	; rules summary [K]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ClassElement47OptGrp")
	set subElement=..newElement("ClassElement47OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..addKeyword(.subElement,"STATIC") :1,1:1) {
		if ..Identifier(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ClassElement47OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ClassElement47OptGrp")
	quit ok }
ClassElement48Sub(ParentElement,subElement) methodimpl {
	; rules summary [[K]&C]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ClassElement48Sub")
	set subElement=..newElement("ClassElement48Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ClassElement49OptGrp(.subElement,.addedElement)  {
		if ..Block(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ClassElement48Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ClassElement48Sub")
	quit ok }
ClassElement49OptGrp(ParentElement,subElement) methodimpl {
	; rules summary [K]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ClassElement49OptGrp")
	set subElement=..newElement("ClassElement49OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..addKeyword(.subElement,"STATIC") :1,1:1) {
		if ..Identifier(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ClassElement49OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ClassElement49OptGrp")
	quit ok }
ClassElementName(ParentElement,subElement) methodimpl {
	; rules summary C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ClassElementName")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ClassElementName" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ClassElementName") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..PropertyName(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..PrivateIdentifier(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ClassElementName")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ClassElementName")
	quit ok }
ClassTail(ParentElement,subElement) methodimpl {
	; rules summary [K&C]&P&(?4Call:4?)*&P
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ClassTail")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ClassTail" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ClassTail") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ClassTail42OptGrp(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"{")  {
			if ..ClassTail43RepZero(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,"}")  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ClassTail")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ClassTail")
	quit ok }
ClassTail42OptGrp(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("EXTENDS"),.value)) { quit 1 /* not found is OK */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ClassTail42OptGrp")
	set subElement=..newElement("ClassTail42OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"EXTENDS")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ClassTail42OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ClassTail42OptGrp")
	quit ok }
ClassTail43RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4Call:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..ClassElement(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Closebrace(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("}",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Closebrace")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Closebrace" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Closebrace") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"}")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Closebrace")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Closebrace")
	quit ok }
Closebracket(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("]",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Closebracket")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Closebracket" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Closebracket") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"]")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Closebracket")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Closebracket")
	quit ok }
Closeparen(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(")",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Closeparen")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Closeparen" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Closeparen") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,")")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Closeparen")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Closeparen")
	quit ok }
Colon(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(":",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Colon")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Colon" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Colon") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,":")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Colon")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Colon")
	quit ok }
Comma(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(",",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Comma")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Comma" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Comma") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,",")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Comma")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Comma")
	quit ok }
ContinueStatement(ParentElement,subElement) methodimpl {
	; rules summary K&[C]&C
	; first rule summary K
	if '(..isKeywordInList($lb("CONTINUE"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ContinueStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ContinueStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ContinueStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"CONTINUE")  {
		if $S(..Identifier(.subElement,.addedElement) :1,1:1) {
			if ..Eos(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ContinueStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ContinueStatement")
	quit ok }
CosExpression(ParentElement,subElement) methodimpl {
	; rules summary C|C|C|C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CosExpression")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"CosExpression" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("CosExpression") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..CosExpressionCompiletime(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..CosExpressionRuntime(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..CosExpressionOther(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..CosExpressionServer(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..CosExpressionCall(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CosExpression")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CosExpression")
	quit ok }
CosExpressionBody(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("NEEDS COS EXPRESSION BODY",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CosExpressionBody")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"CosExpressionBody" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("CosExpressionBody") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"NEEDS COS EXPRESSION BODY")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CosExpressionBody")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CosExpressionBody")
	quit ok }
CosExpressionCall(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("#CALL(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CosExpressionCall")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"CosExpressionCall" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("CosExpressionCall") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"#call(")  {
		if ..CosExpressionBody(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,")#")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CosExpressionCall")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CosExpressionCall")
	quit ok }
CosExpressionCompiletime(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("##(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CosExpressionCompiletime")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"CosExpressionCompiletime" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("CosExpressionCompiletime") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"##(")  {
		if ..CosExpressionBody(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,")##")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CosExpressionCompiletime")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CosExpressionCompiletime")
	quit ok }
CosExpressionOther(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("<%=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CosExpressionOther")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"CosExpressionOther" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("CosExpressionOther") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"<%=")  {
		if ..CosExpressionBody(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"%>")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CosExpressionOther")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CosExpressionOther")
	quit ok }
CosExpressionRuntime(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("#(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CosExpressionRuntime")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"CosExpressionRuntime" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("CosExpressionRuntime") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"#(")  {
		if ..CosExpressionBody(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,")#")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CosExpressionRuntime")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CosExpressionRuntime")
	quit ok }
CosExpressionServer(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("#SERVER(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:CosExpressionServer")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"CosExpressionServer" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("CosExpressionServer") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"#server(")  {
		if ..CosExpressionBody(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,")#")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("CosExpressionServer")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:CosExpressionServer")
	quit ok }
DebuggerStatement(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("DEBUGGER"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:DebuggerStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"DebuggerStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("DebuggerStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"DEBUGGER")  {
		if ..Eos(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("DebuggerStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:DebuggerStatement")
	quit ok }
DecimalIntegerLiteral(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("NEED DECIMAL_INTEGER_LITERAL",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:DecimalIntegerLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"DecimalIntegerLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("DecimalIntegerLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"NEED decimal_integer_literal")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("DecimalIntegerLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:DecimalIntegerLiteral")
	quit ok }
DecimalLiteral(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("NEED DECIMAL_LITERAL",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:DecimalLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"DecimalLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("DecimalLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"NEED decimal_literal")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("DecimalLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:DecimalLiteral")
	quit ok }
Declaration(ParentElement,subElement) methodimpl {
	; rules summary C|C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Declaration")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Declaration" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Declaration") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..VariableStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ClassDeclaration(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..FunctionDeclaration(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Declaration")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Declaration")
	quit ok }
DefaultClause(ParentElement,subElement) methodimpl {
	; rules summary K&P&(?4punctuation:4?)*
	; first rule summary K
	if '(..isKeywordInList($lb("DEFAULT"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:DefaultClause")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"DefaultClause" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("DefaultClause") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"DEFAULT")  {
		if ..addPunctuation(.subElement,":")  {
			if ..DefaultClause37RepZero(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("DefaultClause")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:DefaultClause")
	quit ok }
DefaultClause37RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..DefaultClause38Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
DefaultClause38Sub(ParentElement,subElement) methodimpl {
	; rules summary ?4NotRule4?&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:DefaultClause38Sub")
	set subElement=..newElement("DefaultClause38Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if '..addKeyword(.subElement,"CASE")  {
		if ..Statement(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("DefaultClause38Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:DefaultClause38Sub")
	quit ok }
Divide(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("/",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Divide")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Divide" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Divide") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"/")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Divide")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Divide")
	quit ok }
Divideassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("/=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Divideassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Divideassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Divideassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"/=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Divideassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Divideassign")
	quit ok }
Dot(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(".",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Dot")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Dot" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Dot") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,".")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Dot")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Dot")
	quit ok }
Dyadicop(ParentElement,subElement) methodimpl {
	; rules summary P&C&P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P|P&C|C|K
	; first rule summary P&C&P
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Dyadicop")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Dyadicop" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Dyadicop") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Dyadicop127Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"===")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,">>>")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"!==")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"**")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"??")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"<<")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,">>")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"<=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,">=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"==")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"!=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"&&")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"||")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"+=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"-=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"*=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"*")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"/")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"%")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"+")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"-")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"&")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"^")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"|")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"<")  {
		set done=1 ; or
	} elseif ..Dyadicop128Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..CosExpressionRuntime(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"INSTANCEOF")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Dyadicop")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Dyadicop")
	quit ok }
Dyadicop127Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("?",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Dyadicop127Sub")
	set subElement=..newElement("Dyadicop127Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"?")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,":")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Dyadicop127Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Dyadicop127Sub")
	quit ok }
Dyadicop128Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle(">",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Dyadicop128Sub")
	set subElement=..newElement("Dyadicop128Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,">")  {
		if ..IsNotLineTerminator(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Dyadicop128Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Dyadicop128Sub")
	quit ok }
ElementList(ParentElement,subElement) methodimpl {
	; rules summary [C]&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ElementList")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ElementList" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ElementList") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..ArrayElement(.subElement,.addedElement) :1,1:1) {
		if ..ElementList59RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ElementList")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ElementList")
	quit ok }
ElementList59RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..ElementList60Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
ElementList60Sub(ParentElement,subElement) methodimpl {
	; rules summary P&[C]
	; first rule summary P
	if '(..isStringSingle(",",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ElementList60Sub")
	set subElement=..newElement("ElementList60Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,",")  {
		if $S(..ArrayElement(.subElement,.addedElement) :1,1:1) {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ElementList60Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ElementList60Sub")
	quit ok }
Ellipsis(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("...",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Ellipsis")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Ellipsis" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Ellipsis") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"...")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Ellipsis")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Ellipsis")
	quit ok }
EmptyStatement(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(";",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:EmptyStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"EmptyStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("EmptyStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,";")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("EmptyStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:EmptyStatement")
	quit ok }
EndOfFile(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("NEED END_OF_FILE",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:EndOfFile")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"EndOfFile" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("EndOfFile") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"NEED end_of_file")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("EndOfFile")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:EndOfFile")
	quit ok }
Eos(ParentElement,subElement) methodimpl {
	; rules summary C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Eos")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Eos" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Eos") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Semicolon(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..EndOfFile(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Eos")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Eos")
	quit ok }
Equals(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("==",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Equals")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Equals" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Equals") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"==")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Equals")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Equals")
	quit ok }
ExportAliasName(ParentElement,subElement) methodimpl {
	; rules summary C&[K&C]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExportAliasName")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ExportAliasName" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ExportAliasName") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ModuleExportName(.subElement,.addedElement)  {
		if $S(..ExportAliasName17Sub(.subElement,.addedElement) :1,1:1) {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExportAliasName")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExportAliasName")
	quit ok }
ExportAliasName17Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("AS"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExportAliasName17Sub")
	set subElement=..newElement("ExportAliasName17Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"AS")  {
		if ..ModuleExportName(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExportAliasName17Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExportAliasName17Sub")
	quit ok }
ExportFromBlock(ParentElement,subElement) methodimpl {
	; rules summary C&C&C|C&[C]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExportFromBlock")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ExportFromBlock" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ExportFromBlock") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ExportFromBlock13Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ExportFromBlock14Sub(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExportFromBlock")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExportFromBlock")
	quit ok }
ExportFromBlock13Sub(ParentElement,subElement) methodimpl {
	; rules summary C&C&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExportFromBlock13Sub")
	set subElement=..newElement("ExportFromBlock13Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ImportNamespace(.subElement,.addedElement)  {
		if ..ImportFrom(.subElement,.addedElement)  {
			if ..Eos(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExportFromBlock13Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExportFromBlock13Sub")
	quit ok }
ExportFromBlock14Sub(ParentElement,subElement) methodimpl {
	; rules summary C&[C]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExportFromBlock14Sub")
	set subElement=..newElement("ExportFromBlock14Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ExportModuleItems(.subElement,.addedElement)  {
		if $S(..ImportFrom(.subElement,.addedElement) :1,1:1) {
			if ..Eos(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExportFromBlock14Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExportFromBlock14Sub")
	quit ok }
ExportModuleItems(ParentElement,subElement) methodimpl {
	; rules summary P&C&(?4punctuation:4?)*&P
	; first rule summary P
	if '(..isStringSingle("{",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExportModuleItems")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ExportModuleItems" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ExportModuleItems") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"{")  {
		if ..ExportAliasName(.subElement,.addedElement)  {
			if ..ExportModuleItems15RepZero(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,"}")  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExportModuleItems")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExportModuleItems")
	quit ok }
ExportModuleItems15RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..ExportModuleItems16Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
ExportModuleItems16Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle(",",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExportModuleItems16Sub")
	set subElement=..newElement("ExportModuleItems16Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,",")  {
		if ..ExportAliasName(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExportModuleItems16Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExportModuleItems16Sub")
	quit ok }
ExportStatement(ParentElement,subElement) methodimpl {
	; rules summary K&[K]&C|C&C|K&K&C&C
	; first rule summary K&[K]&C|C&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExportStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ExportStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ExportStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ExportStatement10Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ExportStatement12Sub(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExportStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExportStatement")
	quit ok }
ExportStatement10Sub(ParentElement,subElement) methodimpl {
	; rules summary K&[K]&C|C&C
	; first rule summary K
	if '(..isKeywordInList($lb("EXPORT"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExportStatement10Sub")
	set subElement=..newElement("ExportStatement10Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"EXPORT")  {
		if $S(..addKeyword(.subElement,"DEFAULT") :1,1:1) {
			if ..ExportStatement11Sub(.subElement,.addedElement)  {
				if ..Eos(.subElement,.addedElement)  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExportStatement10Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExportStatement10Sub")
	quit ok }
ExportStatement11Sub(ParentElement,subElement) methodimpl {
	; rules summary C|C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..ExportFromBlock(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Declaration(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
ExportStatement12Sub(ParentElement,subElement) methodimpl {
	; rules summary K&K&C&C
	; first rule summary K
	if '(..isKeywordInList($lb("EXPORT"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExportStatement12Sub")
	set subElement=..newElement("ExportStatement12Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"EXPORT")  {
		if ..addKeyword(.subElement,"DEFAULT")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				if ..Eos(.subElement,.addedElement)  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExportStatement12Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExportStatement12Sub")
	quit ok }
ExpressionSequence(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExpressionSequence")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ExpressionSequence" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ExpressionSequence") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..ExpressionSequence72RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExpressionSequence")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExpressionSequence")
	quit ok }
ExpressionSequence72RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..ExpressionSequence73Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
ExpressionSequence73Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle(",",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExpressionSequence73Sub")
	set subElement=..newElement("ExpressionSequence73Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,",")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExpressionSequence73Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExpressionSequence73Sub")
	quit ok }
ExpressionStatement(ParentElement,subElement) methodimpl {
	; rules summary C&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ExpressionStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ExpressionStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ExpressionStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ExpressionSequence(.subElement,.addedElement)  {
		if ..Eos(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ExpressionStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ExpressionStatement")
	quit ok }
Factor(ParentElement,subElement) methodimpl {
	; rules summary (?4punctuation:4?)*&C&[P|P]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Factor")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Factor" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Factor") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Factor124RepZero(.subElement,.addedElement)  {
		if ..Primary(.subElement,.addedElement)  {
			if ..Factor126OptGrp(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Factor")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Factor")
	quit ok }
Factor124RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Factor125Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Factor125Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..Monadicop(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Factor126OptGrp(ParentElement,subElement) methodimpl {
	; rules summary P|P
	if '(..isStringInList($lb("++","--"),2,.value)) { quit 1 /* not found is OK */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"++")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"--")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* failure rollsback but returns OK */
	}
	quit ok }
FieldDefinition(ParentElement,subElement) methodimpl {
	; rules summary C&[C]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:FieldDefinition")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"FieldDefinition" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("FieldDefinition") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ClassElementName(.subElement,.addedElement)  {
		if $S(..Initializer(.subElement,.addedElement) :1,1:1) {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("FieldDefinition")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:FieldDefinition")
	quit ok }
FinallyProduction(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("FINALLY"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:FinallyProduction")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"FinallyProduction" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("FinallyProduction") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"FINALLY")  {
		if ..Block(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("FinallyProduction")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:FinallyProduction")
	quit ok }
FormalParameterArg(ParentElement,subElement) methodimpl {
	; rules summary C&[P&C]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:FormalParameterArg")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"FormalParameterArg" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("FormalParameterArg") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Assignable(.subElement,.addedElement)  {
		if ..FormalParameterArg57OptGrp(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("FormalParameterArg")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:FormalParameterArg")
	quit ok }
FormalParameterArg57OptGrp(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle("=",.value)) { quit 1 /* not found is OK */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:FormalParameterArg57OptGrp")
	set subElement=..newElement("FormalParameterArg57OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"=")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("FormalParameterArg57OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:FormalParameterArg57OptGrp")
	quit ok }
FormalParameterList(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*&[P&C]|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:FormalParameterList")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"FormalParameterList" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("FormalParameterList") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..FormalParameterList53Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..LastFormalParameterArg(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("FormalParameterList")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:FormalParameterList")
	quit ok }
FormalParameterList53Sub(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*&[P&C]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:FormalParameterList53Sub")
	set subElement=..newElement("FormalParameterList53Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..FormalParameterArg(.subElement,.addedElement)  {
		if ..FormalParameterList54RepZero(.subElement,.addedElement)  {
			if ..FormalParameterList56OptGrp(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("FormalParameterList53Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:FormalParameterList53Sub")
	quit ok }
FormalParameterList54RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..FormalParameterList55Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
FormalParameterList55Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle(",",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:FormalParameterList55Sub")
	set subElement=..newElement("FormalParameterList55Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,",")  {
		if ..FormalParameterArg(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("FormalParameterList55Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:FormalParameterList55Sub")
	quit ok }
FormalParameterList56OptGrp(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle(",",.value)) { quit 1 /* not found is OK */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:FormalParameterList56OptGrp")
	set subElement=..newElement("FormalParameterList56OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,",")  {
		if ..LastFormalParameterArg(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("FormalParameterList56OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:FormalParameterList56OptGrp")
	quit ok }
Function(ParentElement,subElement) methodimpl {
	; rules summary C&[P&C&P]&P&[C]&P
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Function")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Function" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Function") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Identifier(.subElement,.addedElement)  {
		if ..Function164OptGrp(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"(")  {
				if $S(..ExpressionSequence(.subElement,.addedElement) :1,1:1) {
					if ..addPunctuation(.subElement,")")  {
						set done=1 ; end compileRules
					}
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Function")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Function")
	quit ok }
Function164OptGrp(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("[",.value)) { quit 1 /* not found is OK */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Function164OptGrp")
	set subElement=..newElement("Function164OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"[")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"]")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Function164OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Function164OptGrp")
	quit ok }
FunctionBody(ParentElement,subElement) methodimpl {
	; rules summary P&[C]&P
	; first rule summary P
	if '(..isStringSingle("{",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:FunctionBody")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"FunctionBody" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("FunctionBody") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"{")  {
		if $S(..SourceElements(.subElement,.addedElement) :1,1:1) {
			if ..addPunctuation(.subElement,"}")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("FunctionBody")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:FunctionBody")
	quit ok }
FunctionDeclaration(ParentElement,subElement) methodimpl {
	; rules summary [K]&K&[P]&C&P&[C]&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:FunctionDeclaration")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"FunctionDeclaration" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("FunctionDeclaration") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..addKeyword(.subElement,"ASYNC") :1,1:1) {
		if ..addKeyword(.subElement,"FUNCTION")  {
			if $S(..addPunctuation(.subElement,"*") :1,1:1) {
				if ..Identifier(.subElement,.addedElement)  {
					if ..addPunctuation(.subElement,"(")  {
						if $S(..FormalParameterList(.subElement,.addedElement) :1,1:1) {
							if ..addPunctuation(.subElement,")")  {
								if ..FunctionBody(.subElement,.addedElement)  {
									set done=1 ; end compileRules
								}
							}
						}
					}
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("FunctionDeclaration")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:FunctionDeclaration")
	quit ok }
Getter(ParentElement,subElement) methodimpl {
	; rules summary K&C&C
	; first rule summary K
	if '(..isKeywordInList($lb("GET"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Getter")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Getter" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Getter") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"GET")  {
		if ..Identifier(.subElement,.addedElement)  {
			if ..ClassElementName(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Getter")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Getter")
	quit ok }
Greaterthanequals(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(">=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Greaterthanequals")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Greaterthanequals" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Greaterthanequals") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,">=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Greaterthanequals")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Greaterthanequals")
	quit ok }
Hashtag(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("#",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Hashtag")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Hashtag" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Hashtag") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"#")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Hashtag")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Hashtag")
	quit ok }
HexIntegerLiteral(ParentElement,subElement) methodimpl {
	; rules summary P|P&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:HexIntegerLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"HexIntegerLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("HexIntegerLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..HexIntegerLiteral177Sub(.subElement,.addedElement)  {
		if ..HexIntegerLiteral178RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("HexIntegerLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:HexIntegerLiteral")
	quit ok }
HexIntegerLiteral177Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P
	if '(..isStringInList($lb("0X","0X"),2,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"0x")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"0X")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
HexIntegerLiteral178RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..HexIntegerLiteral179Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
HexIntegerLiteral179Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P|P|P|P|P|P|P|P|P|K|K|K|K|K|K
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:HexIntegerLiteral179Sub")
	set subElement=..newElement("HexIntegerLiteral179Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"0")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"1")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"2")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"3")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"4")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"5")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"6")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"7")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"8")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"9")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"A")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"B")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"C")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"D")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"E")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"F")  {
		set done=1 ; end compileRules
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("HexIntegerLiteral179Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:HexIntegerLiteral179Sub")
	quit ok }
Identifier(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("NEED IDENTIFIER",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Identifier")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Identifier" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Identifier") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"NEED IDENTIFIER")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Identifier")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Identifier")
	quit ok }
IdentifierName(ParentElement,subElement) methodimpl {
	; rules summary C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IdentifierName")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"IdentifierName" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("IdentifierName") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Identifier(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ReservedWord(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IdentifierName")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IdentifierName")
	quit ok }
Identityequals(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("===",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Identityequals")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Identityequals" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Identityequals") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"===")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Identityequals")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Identityequals")
	quit ok }
Identitynotequals(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("!==",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Identitynotequals")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Identitynotequals" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Identitynotequals") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"!==")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Identitynotequals")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Identitynotequals")
	quit ok }
IfStatement(ParentElement,subElement) methodimpl {
	; rules summary K&P&C&[K&C]&P&C&[K&C]
	; first rule summary K
	if '(..isKeywordInList($lb("IF"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IfStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"IfStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("IfStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"IF")  {
		if ..addPunctuation(.subElement,"(")  {
			if ..ExpressionSequence(.subElement,.addedElement)  {
				if ..IfStatement21OptGrp(.subElement,.addedElement)  {
					if ..addPunctuation(.subElement,")")  {
						if ..Statement(.subElement,.addedElement)  {
							if $S(..IfStatement22Sub(.subElement,.addedElement) :1,1:1) {
								set done=1 ; end compileRules
							}
						}
					}
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IfStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IfStatement")
	quit ok }
IfStatement21OptGrp(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("IN"),.value)) { quit 1 /* not found is OK */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IfStatement21OptGrp")
	set subElement=..newElement("IfStatement21OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"IN")  {
		if ..ExpressionSequence(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IfStatement21OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IfStatement21OptGrp")
	quit ok }
IfStatement22Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("ELSE"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IfStatement22Sub")
	set subElement=..newElement("IfStatement22Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"ELSE")  {
		if ..Statement(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IfStatement22Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IfStatement22Sub")
	quit ok }
ImportAliasName(ParentElement,subElement) methodimpl {
	; rules summary C&[K&C]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportAliasName")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ImportAliasName" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ImportAliasName") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ModuleExportName(.subElement,.addedElement)  {
		if $S(..ImportAliasName6Sub(.subElement,.addedElement) :1,1:1) {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportAliasName")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportAliasName")
	quit ok }
ImportAliasName6Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("AS"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportAliasName6Sub")
	set subElement=..newElement("ImportAliasName6Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"AS")  {
		if ..ImportedBinding(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportAliasName6Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportAliasName6Sub")
	quit ok }
ImportDefault(ParentElement,subElement) methodimpl {
	; rules summary C&P
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportDefault")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ImportDefault" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ImportDefault") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..AliasName(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,",")  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportDefault")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportDefault")
	quit ok }
ImportFrom(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("FROM"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportFrom")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ImportFrom" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ImportFrom") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"FROM")  {
		if ..StringLiteral(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportFrom")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportFrom")
	quit ok }
ImportFromBlock(ParentElement,subElement) methodimpl {
	; rules summary [C]&C|C&C&C|C&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportFromBlock")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ImportFromBlock" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ImportFromBlock") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..ImportDefault(.subElement,.addedElement) :1,1:1) {
		if ..ImportFromBlock3Sub(.subElement,.addedElement)  {
			if ..ImportFrom(.subElement,.addedElement)  {
				if ..Eos(.subElement,.addedElement)  {
					set done=1 ; or
				} elseif ..StringLiteral(.subElement,.addedElement)  {
					if ..Eos(.subElement,.addedElement)  {
						set done=1 ; end compileRules
					}
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportFromBlock")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportFromBlock")
	quit ok }
ImportFromBlock3Sub(ParentElement,subElement) methodimpl {
	; rules summary C|C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..ImportNamespace(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ImportModuleItems(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
ImportModuleItems(ParentElement,subElement) methodimpl {
	; rules summary P&C&(?4punctuation:4?)*&P
	; first rule summary P
	if '(..isStringSingle("{",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportModuleItems")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ImportModuleItems" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ImportModuleItems") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"{")  {
		if ..ImportAliasName(.subElement,.addedElement)  {
			if ..ImportModuleItems4RepZero(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,"}")  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportModuleItems")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportModuleItems")
	quit ok }
ImportModuleItems4RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..ImportModuleItems5Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
ImportModuleItems5Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle(",",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportModuleItems5Sub")
	set subElement=..newElement("ImportModuleItems5Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,",")  {
		if ..ImportAliasName(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportModuleItems5Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportModuleItems5Sub")
	quit ok }
ImportNamespace(ParentElement,subElement) methodimpl {
	; rules summary P|C&[K&C]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportNamespace")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ImportNamespace" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ImportNamespace") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ImportNamespace7Sub(.subElement,.addedElement)  {
		if $S(..ImportNamespace8Sub(.subElement,.addedElement) :1,1:1) {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportNamespace")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportNamespace")
	quit ok }
ImportNamespace7Sub(ParentElement,subElement) methodimpl {
	; rules summary P|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportNamespace7Sub")
	set subElement=..newElement("ImportNamespace7Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"*")  {
		set done=1 ; or
	} elseif ..IdentifierName(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportNamespace7Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportNamespace7Sub")
	quit ok }
ImportNamespace8Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("AS"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportNamespace8Sub")
	set subElement=..newElement("ImportNamespace8Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"AS")  {
		if ..IdentifierName(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportNamespace8Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportNamespace8Sub")
	quit ok }
ImportStatement(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("IMPORT"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ImportStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ImportStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"IMPORT")  {
		if ..ImportFromBlock(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportStatement")
	quit ok }
ImportedBinding(ParentElement,subElement) methodimpl {
	; rules summary C|K|K
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ImportedBinding")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ImportedBinding" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ImportedBinding") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Identifier(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"YIELD")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"AWAIT")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ImportedBinding")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ImportedBinding")
	quit ok }
Initializer(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle("=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Initializer")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Initializer" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Initializer") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"=")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Initializer")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Initializer")
	quit ok }
IsNotLineTerminator(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("NEEDS IS_NOT_LINE_TERMINATOR",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IsNotLineTerminator")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"IsNotLineTerminator" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("IsNotLineTerminator") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"NEEDS is_not_Line_Terminator")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IsNotLineTerminator")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IsNotLineTerminator")
	quit ok }
IterationStatement(ParentElement,subElement) methodimpl {
	; rules summary K&C&K&P&C&P&C|K&P&C&P&C|K&P&K&C&P&[C]&P&[C]&P&C|K&P&[C|C]&P&[C]&P&[C]&P&C|K&P&C|C&K&C&P&C|K&[K]&P&C|C&K&C&P&C
	; first rule summary K&C&K&P&C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IterationStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"IterationStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("IterationStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..IterationStatement23Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..IterationStatement24Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..IterationStatement25Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..IterationStatement26Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..IterationStatement28Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..IterationStatement30Sub(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IterationStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IterationStatement")
	quit ok }
IterationStatement23Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C&K&P&C&P&C
	; first rule summary K
	if '(..isKeywordInList($lb("DO"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IterationStatement23Sub")
	set subElement=..newElement("IterationStatement23Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"DO")  {
		if ..Statement(.subElement,.addedElement)  {
			if ..addKeyword(.subElement,"WHILE")  {
				if ..addPunctuation(.subElement,"(")  {
					if ..ExpressionSequence(.subElement,.addedElement)  {
						if ..addPunctuation(.subElement,")")  {
							if ..Eos(.subElement,.addedElement)  {
								set done=1 ; end compileRules
							}
						}
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IterationStatement23Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IterationStatement23Sub")
	quit ok }
IterationStatement24Sub(ParentElement,subElement) methodimpl {
	; rules summary K&P&C&P&C
	; first rule summary K
	if '(..isKeywordInList($lb("WHILE"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IterationStatement24Sub")
	set subElement=..newElement("IterationStatement24Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"WHILE")  {
		if ..addPunctuation(.subElement,"(")  {
			if ..ExpressionSequence(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,")")  {
					if ..Statement(.subElement,.addedElement)  {
						set done=1 ; end compileRules
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IterationStatement24Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IterationStatement24Sub")
	quit ok }
IterationStatement25Sub(ParentElement,subElement) methodimpl {
	; rules summary K&P&K&C&P&[C]&P&[C]&P&C
	; first rule summary K
	if '(..isKeywordInList($lb("FOR"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IterationStatement25Sub")
	set subElement=..newElement("IterationStatement25Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"FOR")  {
		if ..addPunctuation(.subElement,"(")  {
			if ..addKeyword(.subElement,"VAR")  {
				if ..VariableDeclaration(.subElement,.addedElement)  {
					if ..addPunctuation(.subElement,";")  {
						if $S(..SingleExpression(.subElement,.addedElement) :1,1:1) {
							if ..addPunctuation(.subElement,";")  {
								if $S(..SingleExpression(.subElement,.addedElement) :1,1:1) {
									if ..addPunctuation(.subElement,")")  {
										if ..Statement(.subElement,.addedElement)  {
											set done=1 ; end compileRules
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IterationStatement25Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IterationStatement25Sub")
	quit ok }
IterationStatement26Sub(ParentElement,subElement) methodimpl {
	; rules summary K&P&[C|C]&P&[C]&P&[C]&P&C
	; first rule summary K
	if '(..isKeywordInList($lb("FOR"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IterationStatement26Sub")
	set subElement=..newElement("IterationStatement26Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"FOR")  {
		if ..addPunctuation(.subElement,"(")  {
			if ..IterationStatement27OptGrp(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,";")  {
					if $S(..ExpressionSequence(.subElement,.addedElement) :1,1:1) {
						if ..addPunctuation(.subElement,";")  {
							if $S(..ExpressionSequence(.subElement,.addedElement) :1,1:1) {
								if ..addPunctuation(.subElement,")")  {
									if ..Statement(.subElement,.addedElement)  {
										set done=1 ; end compileRules
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IterationStatement26Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IterationStatement26Sub")
	quit ok }
IterationStatement27OptGrp(ParentElement,subElement) methodimpl {
	; rules summary C|C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..VariableDeclarationList(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ExpressionSequence(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* failure rollsback but returns OK */
	}
	quit ok }
IterationStatement28Sub(ParentElement,subElement) methodimpl {
	; rules summary K&P&C|C&K&C&P&C
	; first rule summary K
	if '(..isKeywordInList($lb("FOR"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IterationStatement28Sub")
	set subElement=..newElement("IterationStatement28Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"FOR")  {
		if ..addPunctuation(.subElement,"(")  {
			if ..IterationStatement29Sub(.subElement,.addedElement)  {
				if ..addKeyword(.subElement,"IN")  {
					if ..ExpressionSequence(.subElement,.addedElement)  {
						if ..addPunctuation(.subElement,")")  {
							if ..Statement(.subElement,.addedElement)  {
								set done=1 ; end compileRules
							}
						}
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IterationStatement28Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IterationStatement28Sub")
	quit ok }
IterationStatement29Sub(ParentElement,subElement) methodimpl {
	; rules summary C|C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..VariableDeclarationList(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..SingleExpression(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
IterationStatement30Sub(ParentElement,subElement) methodimpl {
	; rules summary K&[K]&P&C|C&K&C&P&C
	; first rule summary K
	if '(..isKeywordInList($lb("FOR"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:IterationStatement30Sub")
	set subElement=..newElement("IterationStatement30Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"FOR")  {
		if $S(..addKeyword(.subElement,"AWAIT") :1,1:1) {
			if ..addPunctuation(.subElement,"(")  {
				if ..IterationStatement31Sub(.subElement,.addedElement)  {
					if ..addKeyword(.subElement,"OF")  {
						if ..ExpressionSequence(.subElement,.addedElement)  {
							if ..addPunctuation(.subElement,")")  {
								if ..Statement(.subElement,.addedElement)  {
									set done=1 ; end compileRules
								}
							}
						}
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("IterationStatement30Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:IterationStatement30Sub")
	quit ok }
IterationStatement31Sub(ParentElement,subElement) methodimpl {
	; rules summary C|C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..VariableDeclarationList(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..SingleExpression(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Keyword(ParentElement,subElement) methodimpl {
	; rules summary K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K|K
	if '(..isKeywordInList($lb("BREAK","DO","INSTANCEOF","TYPEOF","CASE","ELSE","NEW","VAR","CATCH","FINALLY","RETURN","VOID","CONTINUE","FOR","SWITCH","WHILE","DEBUGGER","FUNCTION","THIS","WITH","DEFAULT","IF","THROW","DELETE","IN","TRY","CLASS","ENUM","EXTENDS","SUPER","CONST","EXPORT","IMPORT","IMPLEMENTS","LET","PRIVATE","PUBLIC","INTERFACE","PACKAGE","PROTECTED","STATIC","YIELD","ASYNC","AWAIT","FROM","AS","OF"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Keyword")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Keyword" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Keyword") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"BREAK")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"DO")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"INSTANCEOF")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"TYPEOF")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"CASE")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"ELSE")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"NEW")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"VAR")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"CATCH")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"FINALLY")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"RETURN")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"VOID")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"CONTINUE")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"FOR")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"SWITCH")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"WHILE")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"DEBUGGER")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"FUNCTION")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"THIS")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"WITH")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"DEFAULT")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"IF")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"THROW")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"DELETE")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"IN")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"TRY")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"CLASS")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"ENUM")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"EXTENDS")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"SUPER")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"CONST")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"EXPORT")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"IMPORT")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"IMPLEMENTS")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"LET")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"PRIVATE")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"PUBLIC")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"INTERFACE")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"PACKAGE")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"PROTECTED")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"STATIC")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"YIELD")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"ASYNC")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"AWAIT")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"FROM")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"AS")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"OF")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Keyword")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Keyword")
	quit ok }
LabelledStatement(ParentElement,subElement) methodimpl {
	; rules summary C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:LabelledStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"LabelledStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("LabelledStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Identifier(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,":")  {
			if ..Statement(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("LabelledStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:LabelledStatement")
	quit ok }
LastFormalParameterArg(ParentElement,subElement) methodimpl {
	; rules summary C&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:LastFormalParameterArg")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"LastFormalParameterArg" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("LastFormalParameterArg") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Ellipsis(.subElement,.addedElement)  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("LastFormalParameterArg")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:LastFormalParameterArg")
	quit ok }
Leftshiftarithmetic(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("<<",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Leftshiftarithmetic")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Leftshiftarithmetic" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Leftshiftarithmetic") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"<<")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Leftshiftarithmetic")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Leftshiftarithmetic")
	quit ok }
Leftshiftarithmeticassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("<<=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Leftshiftarithmeticassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Leftshiftarithmeticassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Leftshiftarithmeticassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"<<=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Leftshiftarithmeticassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Leftshiftarithmeticassign")
	quit ok }
Lessthan(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("<",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Lessthan")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Lessthan" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Lessthan") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"<")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Lessthan")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Lessthan")
	quit ok }
Lessthanequals(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("<=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Lessthanequals")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Lessthanequals" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Lessthanequals") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"<=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Lessthanequals")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Lessthanequals")
	quit ok }
Let(ParentElement,subElement) methodimpl {
	; rules summary K
	if '(..isKeywordInList($lb("LET"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Let")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Let" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Let") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"LET")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Let")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Let")
	quit ok }
Literal(ParentElement,subElement) methodimpl {
	; rules summary C|C|C&(?4punctuation:4?)*|C&(?4punctuation:4?)*|C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Literal")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Literal" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Literal") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..NullLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..BooleanLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Literal171Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Literal174Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..NumericLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..BigintLiteral(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Literal")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Literal")
	quit ok }
Literal171Sub(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Literal171Sub")
	set subElement=..newElement("Literal171Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..StringLiteral(.subElement,.addedElement)  {
		if ..Literal172RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Literal171Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Literal171Sub")
	quit ok }
Literal172RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Literal173Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Literal173Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..MemberExpressionPart(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Literal174Sub(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Literal174Sub")
	set subElement=..newElement("Literal174Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..RegularExpressionLiteral(.subElement,.addedElement)  {
		if ..Literal175RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Literal174Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Literal174Sub")
	quit ok }
Literal175RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Literal176Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Literal176Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..MemberExpressionPart(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Macro(ParentElement,subElement) methodimpl {
	; rules summary P&C&[P&C&P]
	; first rule summary P
	if '(..isStringSingle("$$$",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Macro")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Macro" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Macro") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"$$$")  {
		if ..Identifier(.subElement,.addedElement)  {
			if ..Macro163OptGrp(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Macro")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Macro")
	quit ok }
Macro163OptGrp(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("(",.value)) { quit 1 /* not found is OK */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Macro163OptGrp")
	set subElement=..newElement("Macro163OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"(")  {
		if ..ExpressionSequence(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,")")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Macro163OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Macro163OptGrp")
	quit ok }
MemberExpressionPart(ParentElement,subElement) methodimpl {
	; rules summary P&C&P|P&C&[P&[C]&P]
	; first rule summary P&C&P
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:MemberExpressionPart")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"MemberExpressionPart" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("MemberExpressionPart") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..MemberExpressionPart160Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..MemberExpressionPart161Sub(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("MemberExpressionPart")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:MemberExpressionPart")
	quit ok }
MemberExpressionPart160Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("[",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:MemberExpressionPart160Sub")
	set subElement=..newElement("MemberExpressionPart160Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"[")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"]")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("MemberExpressionPart160Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:MemberExpressionPart160Sub")
	quit ok }
MemberExpressionPart161Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C&[P&[C]&P]
	; first rule summary P
	if '(..isStringSingle(".",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:MemberExpressionPart161Sub")
	set subElement=..newElement("MemberExpressionPart161Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,".")  {
		if ..Identifier(.subElement,.addedElement)  {
			if $S(..MemberExpressionPart162Sub(.subElement,.addedElement) :1,1:1) {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("MemberExpressionPart161Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:MemberExpressionPart161Sub")
	quit ok }
MemberExpressionPart162Sub(ParentElement,subElement) methodimpl {
	; rules summary P&[C]&P
	; first rule summary P
	if '(..isStringSingle("(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:MemberExpressionPart162Sub")
	set subElement=..newElement("MemberExpressionPart162Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"(")  {
		if $S(..ExpressionSequence(.subElement,.addedElement) :1,1:1) {
			if ..addPunctuation(.subElement,")")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("MemberExpressionPart162Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:MemberExpressionPart162Sub")
	quit ok }
MethodDefinition(ParentElement,subElement) methodimpl {
	; rules summary [K]&[P]&C&P&[C]&P&C|[P]&C&P&P&C|[P]&C&P&?4OptionalSingle4?&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:MethodDefinition")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"MethodDefinition" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("MethodDefinition") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..MethodDefinition50Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..MethodDefinition51Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..MethodDefinition52Sub(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("MethodDefinition")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:MethodDefinition")
	quit ok }
MethodDefinition50Sub(ParentElement,subElement) methodimpl {
	; rules summary [K]&[P]&C&P&[C]&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:MethodDefinition50Sub")
	set subElement=..newElement("MethodDefinition50Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..addKeyword(.subElement,"ASYNC") :1,1:1) {
		if $S(..addPunctuation(.subElement,"*") :1,1:1) {
			if ..ClassElementName(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,"(")  {
					if $S(..FormalParameterList(.subElement,.addedElement) :1,1:1) {
						if ..addPunctuation(.subElement,")")  {
							if ..FunctionBody(.subElement,.addedElement)  {
								set done=1 ; end compileRules
							}
						}
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("MethodDefinition50Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:MethodDefinition50Sub")
	quit ok }
MethodDefinition51Sub(ParentElement,subElement) methodimpl {
	; rules summary [P]&C&P&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:MethodDefinition51Sub")
	set subElement=..newElement("MethodDefinition51Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..addPunctuation(.subElement,"*") :1,1:1) {
		if ..Getter(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"(")  {
				if ..addPunctuation(.subElement,")")  {
					if ..FunctionBody(.subElement,.addedElement)  {
						set done=1 ; end compileRules
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("MethodDefinition51Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:MethodDefinition51Sub")
	quit ok }
MethodDefinition52Sub(ParentElement,subElement) methodimpl {
	; rules summary [P]&C&P&?4OptionalSingle4?&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:MethodDefinition52Sub")
	set subElement=..newElement("MethodDefinition52Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..addPunctuation(.subElement,"*") :1,1:1) {
		if ..Setter(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"(")  {
				if $s(..FormalParameterList(.subElement,.addedElement) :1,1:1)  {
					if ..addPunctuation(.subElement,")")  {
						if ..FunctionBody(.subElement,.addedElement)  {
							set done=1 ; end compileRules
						}
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("MethodDefinition52Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:MethodDefinition52Sub")
	quit ok }
Minus(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("-",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Minus")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Minus" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Minus") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"-")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Minus")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Minus")
	quit ok }
Minusassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("-=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Minusassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Minusassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Minusassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"-=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Minusassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Minusassign")
	quit ok }
Minusminus(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("--",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Minusminus")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Minusminus" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Minusminus") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"--")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Minusminus")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Minusminus")
	quit ok }
ModuleExportName(ParentElement,subElement) methodimpl {
	; rules summary C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ModuleExportName")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ModuleExportName" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ModuleExportName") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..IdentifierName(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..StringLiteral(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ModuleExportName")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ModuleExportName")
	quit ok }
Modulus(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("%",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Modulus")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Modulus" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Modulus") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"%")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Modulus")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Modulus")
	quit ok }
Modulusassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("%=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Modulusassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Modulusassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Modulusassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"%=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Modulusassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Modulusassign")
	quit ok }
Monadicop(ParentElement,subElement) methodimpl {
	; rules summary P|P|P|P|P|P
	if '(..isStringInList($lb("++","--","+","-","~","!"),2,.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Monadicop")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Monadicop" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Monadicop") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"++")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"--")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"+")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"-")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"~")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"!")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Monadicop")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Monadicop")
	quit ok }
Morethan(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(">",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Morethan")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Morethan" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Morethan") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,">")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Morethan")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Morethan")
	quit ok }
Multiply(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("*",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Multiply")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Multiply" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Multiply") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"*")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Multiply")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Multiply")
	quit ok }
Multiplyassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("*=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Multiplyassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Multiplyassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Multiplyassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"*=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Multiplyassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Multiplyassign")
	quit ok }
Not(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("!",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Not")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Not" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Not") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"!")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Not")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Not")
	quit ok }
Notequals(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("!=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Notequals")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Notequals" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Notequals") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"!=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Notequals")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Notequals")
	quit ok }
NullLiteral(ParentElement,subElement) methodimpl {
	; rules summary K
	if '(..isKeywordInList($lb("NULL"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:NullLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"NullLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("NullLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"NULL")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("NullLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:NullLiteral")
	quit ok }
Nullcoalesce(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("??",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Nullcoalesce")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Nullcoalesce" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Nullcoalesce") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"??")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Nullcoalesce")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Nullcoalesce")
	quit ok }
Nullishcoalescingassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("??=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Nullishcoalescingassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Nullishcoalescingassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Nullishcoalescingassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"??=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Nullishcoalescingassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Nullishcoalescingassign")
	quit ok }
NumericLiteral(ParentElement,subElement) methodimpl {
	; rules summary C|C|C|C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:NumericLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"NumericLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("NumericLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..DecimalLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..HexIntegerLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OctalIntegerLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OctalIntegerLiteral2(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..BinaryIntegerLiteral(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("NumericLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:NumericLiteral")
	quit ok }
ObjectLiteral(ParentElement,subElement) methodimpl {
	; rules summary P&[C&(?4punctuation:4?)*]&P
	; first rule summary P
	if '(..isStringSingle("{",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ObjectLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ObjectLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ObjectLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"{")  {
		if ..ObjectLiteral165OptGrp(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"}")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ObjectLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ObjectLiteral")
	quit ok }
ObjectLiteral165OptGrp(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ObjectLiteral165OptGrp")
	set subElement=..newElement("ObjectLiteral165OptGrp") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..PropertyAssignment(.subElement,.addedElement)  {
		if ..ObjectLiteral166RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ObjectLiteral165OptGrp")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=1 /* failure rollsback but returns OK */
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ObjectLiteral165OptGrp")
	quit ok }
ObjectLiteral166RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..ObjectLiteral167Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
ObjectLiteral167Sub(ParentElement,subElement) methodimpl {
	; rules summary P&[C]
	; first rule summary P
	if '(..isStringSingle(",",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ObjectLiteral167Sub")
	set subElement=..newElement("ObjectLiteral167Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,",")  {
		if $S(..PropertyAssignment(.subElement,.addedElement) :1,1:1) {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ObjectLiteral167Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ObjectLiteral167Sub")
	quit ok }
OcosExpressionCall(ParentElement,subElement) methodimpl {
	; rules summary P&P&C&P&[C]&P&P
	; first rule summary P
	if '(..isStringSingle("#CALL(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OcosExpressionCall")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"OcosExpressionCall" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("OcosExpressionCall") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"#call(")  {
		if ..addPunctuation(.subElement,"..")  {
			if ..Identifier(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,"(")  {
					if $S(..ExpressionSequence(.subElement,.addedElement) :1,1:1) {
						if ..addPunctuation(.subElement,")")  {
							if ..addPunctuation(.subElement,")#")  {
								set done=1 ; end compileRules
							}
						}
					}
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OcosExpressionCall")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OcosExpressionCall")
	quit ok }
OcosExpressionServer(ParentElement,subElement) methodimpl {
	; rules summary P&P&C&P&[C]&P&P
	; first rule summary P
	if '(..isStringSingle("#SERVER(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OcosExpressionServer")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"OcosExpressionServer" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("OcosExpressionServer") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"#server(")  {
		if ..addPunctuation(.subElement,"..")  {
			if ..Identifier(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,"(")  {
					if $S(..ExpressionSequence(.subElement,.addedElement) :1,1:1) {
						if ..addPunctuation(.subElement,")")  {
							if ..addPunctuation(.subElement,")#")  {
								set done=1 ; end compileRules
							}
						}
					}
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OcosExpressionServer")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OcosExpressionServer")
	quit ok }
OctalIntegerLiteral(ParentElement,subElement) methodimpl {
	; rules summary P|P&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OctalIntegerLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"OctalIntegerLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("OctalIntegerLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..OctalIntegerLiteral180Sub(.subElement,.addedElement)  {
		if ..OctalIntegerLiteral181RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OctalIntegerLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OctalIntegerLiteral")
	quit ok }
OctalIntegerLiteral180Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P
	if '(..isStringInList($lb("0O","0O"),2,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"0o")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"0O")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
OctalIntegerLiteral181RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..OctalIntegerLiteral182Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
OctalIntegerLiteral182Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P|P|P|P|P|P|P
	if '(..isStringInList($lb("0","1","2","3","4","5","6","7"),1,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"0")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"1")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"2")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"3")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"4")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"5")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"6")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"7")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
OctalIntegerLiteral2(ParentElement,subElement) methodimpl {
	; rules summary C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OctalIntegerLiteral2")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"OctalIntegerLiteral2" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("OctalIntegerLiteral2") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..OctalIntegerLiteral(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OctalIntegerLiteral2")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OctalIntegerLiteral2")
	quit ok }
OldsingleExpression(ParentElement,subElement) methodimpl {
	; rules summary C|K&?4OptionalSingle4?&C|C&P&C|C&[P]&P&C&P|C&[P]&P&[P]&C|K&C&C|K&C&C|K&C|C&C|K&P&C|C&P|C&P|K&C|K&C|K&C|P&C|P&C|P&C|P&C|P&C|P&C|K&C|C&P&C|C&P|P|P&C|C&P|P&C|C&P&C|C&P|P|P&C|C&P|P|P|P&C|C&K&C|C&K&C|C&P|P|P|P&C|C&P&C|C&P&C|C&P&C|C&P&C|C&P&C|C&P&C&P&C|C&P&C|C&C&C|K&P&C&P|C|K|C|K|C|C|C|P&C&P
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"OldsingleExpression" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("OldsingleExpression") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..AnonymousFunction(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression74Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression75Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression76Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression77Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression78Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression79Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression80Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression81Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression82Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression83Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression84Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression85Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression86Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression87Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression88Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression89Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression90Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression91Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression92Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression93Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression94Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression95Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression96Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression98Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression100Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression101Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression103Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression105Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression106Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression107Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression109Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression110Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression111Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression112Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression113Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression114Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression115Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression116Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression117Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression118Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"THIS")  {
		set done=1 ; or
	} elseif ..Identifier(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"SUPER")  {
		set done=1 ; or
	} elseif ..Literal(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ArrayLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ObjectLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..OldsingleExpression119Sub(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression")
	quit ok }
OldsingleExpression100Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression100Sub")
	set subElement=..newElement("OldsingleExpression100Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"??")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression100Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression100Sub")
	quit ok }
OldsingleExpression101Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P|P|P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression101Sub")
	set subElement=..newElement("OldsingleExpression101Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..OldsingleExpression102Sub(.subElement,.addedElement)  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression101Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression101Sub")
	quit ok }
OldsingleExpression102Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P|P
	if '(..isStringInList($lb("<<",">>",">>>"),3,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"<<")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,">>")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,">>>")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
OldsingleExpression103Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P|P|P|P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression103Sub")
	set subElement=..newElement("OldsingleExpression103Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..OldsingleExpression104Sub(.subElement,.addedElement)  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression103Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression103Sub")
	quit ok }
OldsingleExpression104Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P|P|P
	if '(..isStringInList($lb("<",">","<=",">="),2,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"<")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,">")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"<=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,">=")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
OldsingleExpression105Sub(ParentElement,subElement) methodimpl {
	; rules summary C&K&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression105Sub")
	set subElement=..newElement("OldsingleExpression105Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addKeyword(.subElement,"INSTANCEOF")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression105Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression105Sub")
	quit ok }
OldsingleExpression106Sub(ParentElement,subElement) methodimpl {
	; rules summary C&K&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression106Sub")
	set subElement=..newElement("OldsingleExpression106Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addKeyword(.subElement,"IN")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression106Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression106Sub")
	quit ok }
OldsingleExpression107Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P|P|P|P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression107Sub")
	set subElement=..newElement("OldsingleExpression107Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..OldsingleExpression108Sub(.subElement,.addedElement)  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression107Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression107Sub")
	quit ok }
OldsingleExpression108Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P|P|P
	if '(..isStringInList($lb("==","!=","===","!=="),3,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"==")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"!=")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"===")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"!==")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
OldsingleExpression109Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression109Sub")
	set subElement=..newElement("OldsingleExpression109Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"&")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression109Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression109Sub")
	quit ok }
OldsingleExpression110Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression110Sub")
	set subElement=..newElement("OldsingleExpression110Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"^")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression110Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression110Sub")
	quit ok }
OldsingleExpression111Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression111Sub")
	set subElement=..newElement("OldsingleExpression111Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"|")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression111Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression111Sub")
	quit ok }
OldsingleExpression112Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression112Sub")
	set subElement=..newElement("OldsingleExpression112Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"&&")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression112Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression112Sub")
	quit ok }
OldsingleExpression113Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression113Sub")
	set subElement=..newElement("OldsingleExpression113Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"||")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression113Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression113Sub")
	quit ok }
OldsingleExpression114Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression114Sub")
	set subElement=..newElement("OldsingleExpression114Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"?")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,":")  {
					if ..SingleExpression(.subElement,.addedElement)  {
						set done=1 ; end compileRules
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression114Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression114Sub")
	quit ok }
OldsingleExpression115Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression115Sub")
	set subElement=..newElement("OldsingleExpression115Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"=")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression115Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression115Sub")
	quit ok }
OldsingleExpression116Sub(ParentElement,subElement) methodimpl {
	; rules summary C&C&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression116Sub")
	set subElement=..newElement("OldsingleExpression116Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..AssignmentOperator(.subElement,.addedElement)  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression116Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression116Sub")
	quit ok }
OldsingleExpression117Sub(ParentElement,subElement) methodimpl {
	; rules summary K&P&C&P
	; first rule summary K
	if '(..isKeywordInList($lb("IMPORT"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression117Sub")
	set subElement=..newElement("OldsingleExpression117Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"IMPORT")  {
		if ..addPunctuation(.subElement,"(")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,")")  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression117Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression117Sub")
	quit ok }
OldsingleExpression118Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..YieldStatement(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
OldsingleExpression119Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression119Sub")
	set subElement=..newElement("OldsingleExpression119Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"(")  {
		if ..ExpressionSequence(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,")")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression119Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression119Sub")
	quit ok }
OldsingleExpression74Sub(ParentElement,subElement) methodimpl {
	; rules summary K&?4OptionalSingle4?&C
	; first rule summary K
	if '(..isKeywordInList($lb("CLASS"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression74Sub")
	set subElement=..newElement("OldsingleExpression74Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"CLASS")  {
		if $s(..Identifier(.subElement,.addedElement) :1,1:1)  {
			if ..ClassTail(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression74Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression74Sub")
	quit ok }
OldsingleExpression75Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression75Sub")
	set subElement=..newElement("OldsingleExpression75Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"?.")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression75Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression75Sub")
	quit ok }
OldsingleExpression76Sub(ParentElement,subElement) methodimpl {
	; rules summary C&[P]&P&C&P
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression76Sub")
	set subElement=..newElement("OldsingleExpression76Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if $S(..addPunctuation(.subElement,"?.") :1,1:1) {
			if ..addPunctuation(.subElement,"[")  {
				if ..ExpressionSequence(.subElement,.addedElement)  {
					if ..addPunctuation(.subElement,"]")  {
						set done=1 ; end compileRules
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression76Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression76Sub")
	quit ok }
OldsingleExpression77Sub(ParentElement,subElement) methodimpl {
	; rules summary C&[P]&P&[P]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression77Sub")
	set subElement=..newElement("OldsingleExpression77Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if $S(..addPunctuation(.subElement,"?") :1,1:1) {
			if ..addPunctuation(.subElement,".")  {
				if $S(..addPunctuation(.subElement,"#") :1,1:1) {
					if ..IdentifierName(.subElement,.addedElement)  {
						set done=1 ; end compileRules
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression77Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression77Sub")
	quit ok }
OldsingleExpression78Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C&C
	; first rule summary K
	if '(..isKeywordInList($lb("NEW"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression78Sub")
	set subElement=..newElement("OldsingleExpression78Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"NEW")  {
		if ..Identifier(.subElement,.addedElement)  {
			if ..Arguments(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression78Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression78Sub")
	quit ok }
OldsingleExpression79Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C&C
	; first rule summary K
	if '(..isKeywordInList($lb("NEW"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression79Sub")
	set subElement=..newElement("OldsingleExpression79Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"NEW")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			if ..Arguments(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression79Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression79Sub")
	quit ok }
OldsingleExpression80Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("NEW"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression80Sub")
	set subElement=..newElement("OldsingleExpression80Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"NEW")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression80Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression80Sub")
	quit ok }
OldsingleExpression81Sub(ParentElement,subElement) methodimpl {
	; rules summary C&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression81Sub")
	set subElement=..newElement("OldsingleExpression81Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..Arguments(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression81Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression81Sub")
	quit ok }
OldsingleExpression82Sub(ParentElement,subElement) methodimpl {
	; rules summary K&P&C
	; first rule summary K
	if '(..isKeywordInList($lb("NEW"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression82Sub")
	set subElement=..newElement("OldsingleExpression82Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"NEW")  {
		if ..addPunctuation(.subElement,".")  {
			if ..Identifier(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression82Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression82Sub")
	quit ok }
OldsingleExpression83Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression83Sub")
	set subElement=..newElement("OldsingleExpression83Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"++")  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression83Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression83Sub")
	quit ok }
OldsingleExpression84Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression84Sub")
	set subElement=..newElement("OldsingleExpression84Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"--")  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression84Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression84Sub")
	quit ok }
OldsingleExpression85Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("DELETE"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression85Sub")
	set subElement=..newElement("OldsingleExpression85Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"DELETE")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression85Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression85Sub")
	quit ok }
OldsingleExpression86Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("VOID"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression86Sub")
	set subElement=..newElement("OldsingleExpression86Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"VOID")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression86Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression86Sub")
	quit ok }
OldsingleExpression87Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("TYPEOF"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression87Sub")
	set subElement=..newElement("OldsingleExpression87Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"TYPEOF")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression87Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression87Sub")
	quit ok }
OldsingleExpression88Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle("++",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression88Sub")
	set subElement=..newElement("OldsingleExpression88Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"++")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression88Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression88Sub")
	quit ok }
OldsingleExpression89Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle("--",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression89Sub")
	set subElement=..newElement("OldsingleExpression89Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"--")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression89Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression89Sub")
	quit ok }
OldsingleExpression90Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle("+",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression90Sub")
	set subElement=..newElement("OldsingleExpression90Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"+")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression90Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression90Sub")
	quit ok }
OldsingleExpression91Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle("-",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression91Sub")
	set subElement=..newElement("OldsingleExpression91Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"-")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression91Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression91Sub")
	quit ok }
OldsingleExpression92Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle("~",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression92Sub")
	set subElement=..newElement("OldsingleExpression92Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"~")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression92Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression92Sub")
	quit ok }
OldsingleExpression93Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle("!",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression93Sub")
	set subElement=..newElement("OldsingleExpression93Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"!")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression93Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression93Sub")
	quit ok }
OldsingleExpression94Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("AWAIT"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression94Sub")
	set subElement=..newElement("OldsingleExpression94Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"AWAIT")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression94Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression94Sub")
	quit ok }
OldsingleExpression95Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression95Sub")
	set subElement=..newElement("OldsingleExpression95Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"**")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression95Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression95Sub")
	quit ok }
OldsingleExpression96Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P|P|P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression96Sub")
	set subElement=..newElement("OldsingleExpression96Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..OldsingleExpression97Sub(.subElement,.addedElement)  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression96Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression96Sub")
	quit ok }
OldsingleExpression97Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P|P
	if '(..isStringInList($lb("*","/","%"),1,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"*")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"/")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"%")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
OldsingleExpression98Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P|P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:OldsingleExpression98Sub")
	set subElement=..newElement("OldsingleExpression98Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression(.subElement,.addedElement)  {
		if ..OldsingleExpression99Sub(.subElement,.addedElement)  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("OldsingleExpression98Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:OldsingleExpression98Sub")
	quit ok }
OldsingleExpression99Sub(ParentElement,subElement) methodimpl {
	; rules summary P|P
	if '(..isStringInList($lb("+","-"),1,.value)) { quit 0 /* normal */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"+")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"-")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Openbrace(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("{",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Openbrace")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Openbrace" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Openbrace") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"{")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Openbrace")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Openbrace")
	quit ok }
Openbracket(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("[",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Openbracket")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Openbracket" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Openbracket") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"[")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Openbracket")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Openbracket")
	quit ok }
Openparen(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Openparen")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Openparen" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Openparen") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"(")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Openparen")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Openparen")
	quit ok }
Or(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("||",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Or")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Or" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Or") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"||")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Or")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Or")
	quit ok }
Plus(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("+",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Plus")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Plus" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Plus") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"+")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Plus")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Plus")
	quit ok }
Plusassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("+=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Plusassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Plusassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Plusassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"+=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Plusassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Plusassign")
	quit ok }
Plusplus(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("++",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Plusplus")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Plusplus" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Plusplus") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"++")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Plusplus")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Plusplus")
	quit ok }
Power(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("**",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Power")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Power" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Power") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"**")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Power")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Power")
	quit ok }
Powerassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("**=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Powerassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Powerassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Powerassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"**=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Powerassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Powerassign")
	quit ok }
Primary(ParentElement,subElement) methodimpl {
	; rules summary C|C|P&C&P&(?4punctuation:4?)*|K&?4OptionalSingle4?&C|K&C&C&(?4punctuation:4?)*|K&C&C|K&C|K&P&C|K&C|K&C|K&C|K&C|K&P&C&P|C|K&(?4punctuation:4?)*|C|C&(?4punctuation:4?)*|C&(?4punctuation:4?)*|K|C|C&(?4punctuation:4?)*|C|P&C&P&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Primary" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Primary") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..AnonymousFunction(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..CosExpression(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary129Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary132Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary133Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary136Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary137Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary138Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary139Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary140Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary141Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary142Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary143Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary144Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary145Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Macro(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary148Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary151Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"SUPER")  {
		set done=1 ; or
	} elseif ..Literal(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary154Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ObjectLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..Primary157Sub(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary")
	quit ok }
Primary129Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C&P&(?4punctuation:4?)*
	; first rule summary P
	if '(..isStringSingle("[",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary129Sub")
	set subElement=..newElement("Primary129Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"[")  {
		if ..ExpressionSequence(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"]")  {
				if ..Primary130RepZero(.subElement,.addedElement)  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary129Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary129Sub")
	quit ok }
Primary130RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Primary131Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Primary131Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..MemberExpressionPart(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Primary132Sub(ParentElement,subElement) methodimpl {
	; rules summary K&?4OptionalSingle4?&C
	; first rule summary K
	if '(..isKeywordInList($lb("CLASS"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary132Sub")
	set subElement=..newElement("Primary132Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"CLASS")  {
		if $s(..Identifier(.subElement,.addedElement) :1,1:1)  {
			if ..ClassTail(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary132Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary132Sub")
	quit ok }
Primary133Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C&C&(?4punctuation:4?)*
	; first rule summary K
	if '(..isKeywordInList($lb("NEW"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary133Sub")
	set subElement=..newElement("Primary133Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"NEW")  {
		if ..Identifier(.subElement,.addedElement)  {
			if ..Arguments(.subElement,.addedElement)  {
				if ..Primary134RepZero(.subElement,.addedElement)  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary133Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary133Sub")
	quit ok }
Primary134RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Primary135Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Primary135Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..MemberExpressionPart(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Primary136Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C&C
	; first rule summary K
	if '(..isKeywordInList($lb("NEW"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary136Sub")
	set subElement=..newElement("Primary136Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"NEW")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			if ..Arguments(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary136Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary136Sub")
	quit ok }
Primary137Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("NEW"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary137Sub")
	set subElement=..newElement("Primary137Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"NEW")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary137Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary137Sub")
	quit ok }
Primary138Sub(ParentElement,subElement) methodimpl {
	; rules summary K&P&C
	; first rule summary K
	if '(..isKeywordInList($lb("NEW"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary138Sub")
	set subElement=..newElement("Primary138Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"NEW")  {
		if ..addPunctuation(.subElement,".")  {
			if ..Identifier(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary138Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary138Sub")
	quit ok }
Primary139Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("DELETE"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary139Sub")
	set subElement=..newElement("Primary139Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"DELETE")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary139Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary139Sub")
	quit ok }
Primary140Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("VOID"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary140Sub")
	set subElement=..newElement("Primary140Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"VOID")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary140Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary140Sub")
	quit ok }
Primary141Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("TYPEOF"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary141Sub")
	set subElement=..newElement("Primary141Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"TYPEOF")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary141Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary141Sub")
	quit ok }
Primary142Sub(ParentElement,subElement) methodimpl {
	; rules summary K&C
	; first rule summary K
	if '(..isKeywordInList($lb("AWAIT"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary142Sub")
	set subElement=..newElement("Primary142Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"AWAIT")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary142Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary142Sub")
	quit ok }
Primary143Sub(ParentElement,subElement) methodimpl {
	; rules summary K&P&C&P
	; first rule summary K
	if '(..isKeywordInList($lb("IMPORT"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary143Sub")
	set subElement=..newElement("Primary143Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"IMPORT")  {
		if ..addPunctuation(.subElement,"(")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,")")  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary143Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary143Sub")
	quit ok }
Primary144Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..YieldStatement(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Primary145Sub(ParentElement,subElement) methodimpl {
	; rules summary K&(?4punctuation:4?)*
	; first rule summary K
	if '(..isKeywordInList($lb("THIS"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary145Sub")
	set subElement=..newElement("Primary145Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"THIS")  {
		if ..Primary146RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary145Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary145Sub")
	quit ok }
Primary146RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Primary147Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Primary147Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..MemberExpressionPart(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Primary148Sub(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary148Sub")
	set subElement=..newElement("Primary148Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Function(.subElement,.addedElement)  {
		if ..Primary149RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary148Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary148Sub")
	quit ok }
Primary149RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Primary150Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Primary150Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..MemberExpressionPart(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Primary151Sub(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary151Sub")
	set subElement=..newElement("Primary151Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Identifier(.subElement,.addedElement)  {
		if ..Primary152RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary151Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary151Sub")
	quit ok }
Primary152RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Primary153Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Primary153Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..MemberExpressionPart(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Primary154Sub(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary154Sub")
	set subElement=..newElement("Primary154Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..ArrayLiteral(.subElement,.addedElement)  {
		if ..Primary155RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary154Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary154Sub")
	quit ok }
Primary155RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Primary156Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Primary156Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..MemberExpressionPart(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
Primary157Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C&P&(?4punctuation:4?)*
	; first rule summary P
	if '(..isStringSingle("(",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Primary157Sub")
	set subElement=..newElement("Primary157Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"(")  {
		if ..ExpressionSequence(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,")")  {
				if ..Primary158RepZero(.subElement,.addedElement)  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Primary157Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Primary157Sub")
	quit ok }
Primary158RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Primary159Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Primary159Sub(ParentElement,subElement) methodimpl {
	; rules summary C
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..MemberExpressionPart(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
PrivateIdentifier(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle("#",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:PrivateIdentifier")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"PrivateIdentifier" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("PrivateIdentifier") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"#")  {
		if ..IdentifierName(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("PrivateIdentifier")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:PrivateIdentifier")
	quit ok }
PropertyAssignment(ParentElement,subElement) methodimpl {
	; rules summary C&P&C|P&C&P&P&C|[K]&[P]&C&P&[C]&P&C|C&P&P&C|C&P&C&P&C|[C]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:PropertyAssignment")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"PropertyAssignment" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("PropertyAssignment") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..PropertyAssignment61Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..PropertyAssignment62Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..PropertyAssignment63Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..PropertyAssignment64Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..PropertyAssignment65Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..PropertyAssignment66Sub(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("PropertyAssignment")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:PropertyAssignment")
	quit ok }
PropertyAssignment61Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:PropertyAssignment61Sub")
	set subElement=..newElement("PropertyAssignment61Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..PropertyName(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,":")  {
			if ..SingleExpression(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("PropertyAssignment61Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:PropertyAssignment61Sub")
	quit ok }
PropertyAssignment62Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C&P&P&C
	; first rule summary P
	if '(..isStringSingle("[",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:PropertyAssignment62Sub")
	set subElement=..newElement("PropertyAssignment62Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"[")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"]")  {
				if ..addPunctuation(.subElement,":")  {
					if ..SingleExpression(.subElement,.addedElement)  {
						set done=1 ; end compileRules
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("PropertyAssignment62Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:PropertyAssignment62Sub")
	quit ok }
PropertyAssignment63Sub(ParentElement,subElement) methodimpl {
	; rules summary [K]&[P]&C&P&[C]&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:PropertyAssignment63Sub")
	set subElement=..newElement("PropertyAssignment63Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..addKeyword(.subElement,"ASYNC") :1,1:1) {
		if $S(..addPunctuation(.subElement,"*") :1,1:1) {
			if ..PropertyName(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,"(")  {
					if $S(..FormalParameterList(.subElement,.addedElement) :1,1:1) {
						if ..addPunctuation(.subElement,")")  {
							if ..FunctionBody(.subElement,.addedElement)  {
								set done=1 ; end compileRules
							}
						}
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("PropertyAssignment63Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:PropertyAssignment63Sub")
	quit ok }
PropertyAssignment64Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:PropertyAssignment64Sub")
	set subElement=..newElement("PropertyAssignment64Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Getter(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"(")  {
			if ..addPunctuation(.subElement,")")  {
				if ..FunctionBody(.subElement,.addedElement)  {
					set done=1 ; end compileRules
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("PropertyAssignment64Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:PropertyAssignment64Sub")
	quit ok }
PropertyAssignment65Sub(ParentElement,subElement) methodimpl {
	; rules summary C&P&C&P&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:PropertyAssignment65Sub")
	set subElement=..newElement("PropertyAssignment65Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Setter(.subElement,.addedElement)  {
		if ..addPunctuation(.subElement,"(")  {
			if ..FormalParameterArg(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,")")  {
					if ..FunctionBody(.subElement,.addedElement)  {
						set done=1 ; end compileRules
					}
				}
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("PropertyAssignment65Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:PropertyAssignment65Sub")
	quit ok }
PropertyAssignment66Sub(ParentElement,subElement) methodimpl {
	; rules summary [C]&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:PropertyAssignment66Sub")
	set subElement=..newElement("PropertyAssignment66Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if $S(..Ellipsis(.subElement,.addedElement) :1,1:1) {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("PropertyAssignment66Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:PropertyAssignment66Sub")
	quit ok }
PropertyName(ParentElement,subElement) methodimpl {
	; rules summary C|C|C|P&C&P
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:PropertyName")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"PropertyName" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("PropertyName") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..IdentifierName(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..StringLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..NumericLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..PropertyName67Sub(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("PropertyName")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:PropertyName")
	quit ok }
PropertyName67Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C&P
	; first rule summary P
	if '(..isStringSingle("[",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:PropertyName67Sub")
	set subElement=..newElement("PropertyName67Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"[")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			if ..addPunctuation(.subElement,"]")  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("PropertyName67Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:PropertyName67Sub")
	quit ok }
Questionmark(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("?",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Questionmark")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Questionmark" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Questionmark") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"?")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Questionmark")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Questionmark")
	quit ok }
Questionmarkdot(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("?.",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Questionmarkdot")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Questionmarkdot" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Questionmarkdot") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"?.")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Questionmarkdot")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Questionmarkdot")
	quit ok }
RegularExpressionLiteral(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("NEED REGEX LITERAL",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:RegularExpressionLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"RegularExpressionLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("RegularExpressionLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"NEED regex literal")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("RegularExpressionLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:RegularExpressionLiteral")
	quit ok }
ReservedWord(ParentElement,subElement) methodimpl {
	; rules summary C|C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ReservedWord")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ReservedWord" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ReservedWord") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Keyword(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..NullLiteral(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..BooleanLiteral(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ReservedWord")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ReservedWord")
	quit ok }
ReturnStatement(ParentElement,subElement) methodimpl {
	; rules summary K&[C]&C
	; first rule summary K
	if '(..isKeywordInList($lb("RETURN"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ReturnStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ReturnStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ReturnStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"RETURN")  {
		if $S(..ExpressionSequence(.subElement,.addedElement) :1,1:1) {
			if ..Eos(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ReturnStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ReturnStatement")
	quit ok }
Rightshiftarithmetic(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(">>",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Rightshiftarithmetic")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Rightshiftarithmetic" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Rightshiftarithmetic") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,">>")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Rightshiftarithmetic")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Rightshiftarithmetic")
	quit ok }
Rightshiftarithmeticassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(">>=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Rightshiftarithmeticassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Rightshiftarithmeticassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Rightshiftarithmeticassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,">>=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Rightshiftarithmeticassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Rightshiftarithmeticassign")
	quit ok }
Rightshiftlogical(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(">>>",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Rightshiftlogical")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Rightshiftlogical" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Rightshiftlogical") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,">>>")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Rightshiftlogical")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Rightshiftlogical")
	quit ok }
Rightshiftlogicalassign(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(">>>=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Rightshiftlogicalassign")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Rightshiftlogicalassign" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Rightshiftlogicalassign") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,">>>=")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Rightshiftlogicalassign")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Rightshiftlogicalassign")
	quit ok }
Semicolon(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle(";",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Semicolon")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Semicolon" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Semicolon") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,";")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Semicolon")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Semicolon")
	quit ok }
Setter(ParentElement,subElement) methodimpl {
	; rules summary K&C&C
	; first rule summary K
	if '(..isKeywordInList($lb("SET"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Setter")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Setter" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Setter") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"SET")  {
		if ..Identifier(.subElement,.addedElement)  {
			if ..ClassElementName(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Setter")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Setter")
	quit ok }
SingleExpression(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*&[P|P]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:SingleExpression")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"SingleExpression" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("SingleExpression") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SingleExpression120Sub(.subElement,.addedElement)  {
		if ..SingleExpression123OptGrp(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("SingleExpression")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:SingleExpression")
	quit ok }
SingleExpression120Sub(ParentElement,subElement) methodimpl {
	; rules summary C&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:SingleExpression120Sub")
	set subElement=..newElement("SingleExpression120Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Factor(.subElement,.addedElement)  {
		if ..SingleExpression121RepZero(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("SingleExpression120Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:SingleExpression120Sub")
	quit ok }
SingleExpression121RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..SingleExpression122Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
SingleExpression122Sub(ParentElement,subElement) methodimpl {
	; rules summary C&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:SingleExpression122Sub")
	set subElement=..newElement("SingleExpression122Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Dyadicop(.subElement,.addedElement)  {
		if ..Factor(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("SingleExpression122Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:SingleExpression122Sub")
	quit ok }
SingleExpression123OptGrp(ParentElement,subElement) methodimpl {
	; rules summary P|P
	if '(..isStringInList($lb("--","++"),2,.value)) { quit 1 /* not found is OK */ }
	set subElement=ParentElement
	set done=0 ; method start
	Set subElement=ParentElement
	if ..addPunctuation(.subElement,"--")  {
		set done=1 ; or
	} elseif ..addPunctuation(.subElement,"++")  {
		set done=1 ; end compileRules
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* failure rollsback but returns OK */
	}
	quit ok }
SourceElement(ParentElement,subElement) methodimpl {
	; rules summary C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:SourceElement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"SourceElement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("SourceElement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Statement(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("SourceElement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:SourceElement")
	quit ok }
SourceElements(ParentElement,subElement) methodimpl {
	; rules summary (?4Call:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:SourceElements")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"SourceElements" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("SourceElements") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..SourceElements58RepZero(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("SourceElements")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:SourceElements")
	quit ok }
SourceElements58RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4Call:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..SourceElement(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
Statement(ParentElement,subElement) methodimpl {
	; rules summary C|C|C|C|C|C|C|C|C|C|C|C|C|C|C|C|C|C|C|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:Statement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"Statement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("Statement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Block(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..VariableStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ImportStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ExportStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..EmptyStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ClassDeclaration(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..FunctionDeclaration(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..IfStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..IterationStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ContinueStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..BreakStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ReturnStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..YieldStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..WithStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..LabelledStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..SwitchStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ThrowStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..TryStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..DebuggerStatement(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..ExpressionStatement(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("Statement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:Statement")
	quit ok }
StatementList(ParentElement,subElement) methodimpl {
	; rules summary (?4Call:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:StatementList")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"StatementList" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("StatementList") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..StatementList1RepZero(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("StatementList")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:StatementList")
	quit ok }
StatementList1RepZero(ParentElement,subElement) methodimpl {
	; rules summary ?4Call:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..Statement(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
StatementListMandatory(ParentElement,subElement) methodimpl {
	; rules summary (?4Call:4?)+
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:StatementListMandatory")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"StatementListMandatory" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("StatementListMandatory") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..StatementListMandatory2RepOne(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("StatementListMandatory")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:StatementListMandatory")
	quit ok }
StatementListMandatory2RepOne(ParentElement,subElement) methodimpl {
	; rules summary ?4Call:4?
	set subElement=ParentElement
	set done=0 ; method start
	set done=0 ; must be at least 1
	while ..Statement(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=0 ; normal rollback
	}
	quit ok }
StringLiteral(ParentElement,subElement) methodimpl {
	; rules summary P
	if '(..isStringSingle("NEED STRING LITERAL",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:StringLiteral")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"StringLiteral" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("StringLiteral") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"NEED string literal")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("StringLiteral")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:StringLiteral")
	quit ok }
SwitchStatement(ParentElement,subElement) methodimpl {
	; rules summary K&P&C&P&C
	; first rule summary K
	if '(..isKeywordInList($lb("SWITCH"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:SwitchStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"SwitchStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("SwitchStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"SWITCH")  {
		if ..addPunctuation(.subElement,"(")  {
			if ..ExpressionSequence(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,")")  {
					if ..CaseBlock(.subElement,.addedElement)  {
						set done=1 ; end compileRules
					}
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("SwitchStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:SwitchStatement")
	quit ok }
ThrowStatement(ParentElement,subElement) methodimpl {
	; rules summary K&C&C
	; first rule summary K
	if '(..isKeywordInList($lb("THROW"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:ThrowStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"ThrowStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("ThrowStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"THROW")  {
		if ..ExpressionSequence(.subElement,.addedElement)  {
			if ..Eos(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("ThrowStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:ThrowStatement")
	quit ok }
TryStatement(ParentElement,subElement) methodimpl {
	; rules summary K&C&C&[C]|C
	; first rule summary K
	if '(..isKeywordInList($lb("TRY"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:TryStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"TryStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("TryStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"TRY")  {
		if ..Block(.subElement,.addedElement)  {
			if ..TryStatement39Sub(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("TryStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:TryStatement")
	quit ok }
TryStatement39Sub(ParentElement,subElement) methodimpl {
	; rules summary C&[C]|C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:TryStatement39Sub")
	set subElement=..newElement("TryStatement39Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..TryStatement40Sub(.subElement,.addedElement)  {
		set done=1 ; or
	} elseif ..FinallyProduction(.subElement,.addedElement)  {
		set done=1 ; end compileRules
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("TryStatement39Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:TryStatement39Sub")
	quit ok }
TryStatement40Sub(ParentElement,subElement) methodimpl {
	; rules summary C&[C]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:TryStatement40Sub")
	set subElement=..newElement("TryStatement40Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..CatchProduction(.subElement,.addedElement)  {
		if $S(..FinallyProduction(.subElement,.addedElement) :1,1:1) {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("TryStatement40Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:TryStatement40Sub")
	quit ok }
VarModifier(ParentElement,subElement) methodimpl {
	; rules summary K|K|K
	if '(..isKeywordInList($lb("VAR","LET","CONST"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:VarModifier")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"VarModifier" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("VarModifier") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"VAR")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"LET")  {
		set done=1 ; or
	} elseif ..addKeyword(.subElement,"CONST")  {
		set done=1 ; end compileRules
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("VarModifier")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:VarModifier")
	quit ok }
VariableDeclaration(ParentElement,subElement) methodimpl {
	; rules summary C&[P&C]
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:VariableDeclaration")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"VariableDeclaration" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("VariableDeclaration") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..Assignable(.subElement,.addedElement)  {
		if $S(..VariableDeclaration20Sub(.subElement,.addedElement) :1,1:1) {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("VariableDeclaration")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:VariableDeclaration")
	quit ok }
VariableDeclaration20Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle("=",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:VariableDeclaration20Sub")
	set subElement=..newElement("VariableDeclaration20Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,"=")  {
		if ..SingleExpression(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("VariableDeclaration20Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:VariableDeclaration20Sub")
	quit ok }
VariableDeclarationList(ParentElement,subElement) methodimpl {
	; rules summary C&C&(?4punctuation:4?)*
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:VariableDeclarationList")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"VariableDeclarationList" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("VariableDeclarationList") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..VarModifier(.subElement,.addedElement)  {
		if ..VariableDeclaration(.subElement,.addedElement)  {
			if ..VariableDeclarationList18RepZero(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("VariableDeclarationList")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:VariableDeclarationList")
	quit ok }
VariableDeclarationList18RepZer(ParentElement,subElement) methodimpl {
	; rules summary ?4punctuation:4?
	set subElement=ParentElement
	set done=0 ; method start
	while ..VariableDeclarationList19Sub(.subElement,.addedElement)  {
		set done=1
	}
	if done {
		set ok=1
	} else {
		set ok=1 /* nothing found is ok in RZ */
	}
	quit ok }
VariableDeclarationList19Sub(ParentElement,subElement) methodimpl {
	; rules summary P&C
	; first rule summary P
	if '(..isStringSingle(",",.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:VariableDeclarationList19Sub")
	set subElement=..newElement("VariableDeclarationList19Sub") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addPunctuation(.subElement,",")  {
		if ..VariableDeclaration(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do ParentElement.partsCopy(.subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("VariableDeclarationList19Sub")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:VariableDeclarationList19Sub")
	quit ok }
VariableStatement(ParentElement,subElement) methodimpl {
	; rules summary C&C
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:VariableStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"VariableStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("VariableStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..VariableDeclarationList(.subElement,.addedElement)  {
		if ..Eos(.subElement,.addedElement)  {
			set done=1 ; end compileRules
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("VariableStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:VariableStatement")
	quit ok }
WithStatement(ParentElement,subElement) methodimpl {
	; rules summary K&P&C&P&C
	; first rule summary K
	if '(..isKeywordInList($lb("WITH"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:WithStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"WithStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("WithStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"WITH")  {
		if ..addPunctuation(.subElement,"(")  {
			if ..ExpressionSequence(.subElement,.addedElement)  {
				if ..addPunctuation(.subElement,")")  {
					if ..Statement(.subElement,.addedElement)  {
						set done=1 ; end compileRules
					}
				}
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("WithStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:WithStatement")
	quit ok }
YieldStatement(ParentElement,subElement) methodimpl {
	; rules summary K&[C]&C
	; first rule summary K
	if '(..isKeywordInList($lb("YIELD"),.value)) { quit 0 /* normal */ }
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("Begin PXW.DEV.BNF.GEN.JS:YieldStatement")
	i $d(%path) set currentpath=%path new %path set %path=currentpath_$c(47)_"YieldStatement" d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path="_%path) d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("%path at "_$zconvert(..peek(20),"O","JSON"))
	set subElement=..newElement("YieldStatement") d ..getBookmark(.subElementBM) /* $$$DEBUG("BNFSTART:"_%subElement)*/
	set done=0 ; method start
	if ..addKeyword(.subElement,"YIELD")  {
		if $S(..ExpressionSequence(.subElement,.addedElement) :1,1:1) {
			if ..Eos(.subElement,.addedElement)  {
				set done=1 ; end compileRules
			}
		}
	}
	if done {
		do:subElement.partsCount()>0 ParentElement.AddPart(subElement)
		set ok=1
	} else {
		d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("BNFROLLBACK:"_$p($g(%path),"/",*)) s:subElement.partsCount() rbcount=$i(%RBCOUNT("YieldStatement")) d:subElement.partsCount() ..gotoBookmark(.subElementBM) kill subElement
		set ok=0 ; normal rollback
	}
	d:$isobject($g(%pxwdeb)) %pxwdeb.DEBUG("End PXW.DEV.BNF.GEN.JS:YieldStatement")
	quit ok }
newElement(Type) methodimpl {
	quit ##class(PXW.DEV.BNF.Elements.JS).%New(Type)
}